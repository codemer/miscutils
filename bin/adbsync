#!/usr/bin/env ruby
#
# Use adb to recursively sync directories from the Android device to a local directory

require 'fileutils'
require 'date'

def run(cmd)
  puts("!#{cmd}")
  result = `#{cmd} 2>&1`
  raise "#{result}\nCommand failed: #{cmd}: exit #{$?.to_i}" if $?.to_i != 0
  result.split(/\n/)
end

def remote_ls_files(path, recursive=false)
  files = Array.new
  begin
    run("adb shell ls -l #{path}").each do |line|
      perms, blocks, owner, group, size, date, time, file = line.split(/\s+/, 8)
      link = nil
      next if perms == 'total'
      if perms.match(/^l/)
        file, link = file.split(/\s+->\s+/, 2)
        raise "Failed to read link for '#{file}'" unless link
      end
      if perms.match(/^d/)
        files += remote_ls_files(File.join(path, file), true)
      else
        file = File.join(path, file)
        files.push(size: size.to_i, time: DateTime.parse("#{date} #{time}").to_time, name: file, link: link)
      end
    end
  rescue RuntimeError => e
    STDERR.puts "(#{e.class.inspect}) Could not read directory: #{path}"
  end
  files
end

def main(args)
  fromdir = ARGV.shift
  todir = ARGV.shift || '.'
  if fromdir.nil?
    puts "Must specify source dir on device"
    exit 1
  end
  copy_count = link_count = fail_count = skip_count = 0

  # Make sure a device is plugging in before proceding
  output = run('adb devices')
  if output.size < 2 || !output[1].strip.match(/\sdevice$/)
    STDERR.puts "Device must be connected before proceeding"
    exit 1
  end

  # Get a directory listing and start copying files
  remote_ls_files(fromdir, true).each do |file|
    tofile = File.join(todir, file[:name])
    # FIXME: We should also check the timestamp
    if File.exist?(tofile) && (file[:link] || File.stat(tofile).size == file[:size])
      # Skip file when it already exists and is the same size
      # puts "Skipping #{tofile}..."
      skip_count += 1
      next
    end
    puts "#{file[:name]} ==> #{tofile}"
    # Make sure the target directory exists
    FileUtils.mkdir_p(File.dirname(tofile))
    begin
      if file[:link]
        puts "Linking #{file[:name]} -> #{file[:link]}"
        File.symlink(file[:link], file[:name])
        link_count += 1
      else
        # Copy the file
        run("adb pull #{file[:name]} #{tofile}");
        File.utime(file[:time], file[:time], tofile)
        copy_count += 1
      end
    rescue RuntimeError => e
      # remove tofile if it exists since it is probably corrupt anyway
      File.unlink(tofile) if File.exist?(tofile)
      STDERR.puts("Failed to copy #{file[:name]}")
      fail_count += 1
    end
  end
  puts "Copied #{copy_count} files"
  puts "Created #{link_count} links"
  puts "Skipped #{skip_count} previously copied files" if skip_count > 0
  STDERR.puts "Failed to copy #{fail_count} files" if fail_count > 0
end

main(ARGV)
